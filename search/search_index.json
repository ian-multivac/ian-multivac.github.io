{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is myMultivac? # myMultivac is a personal project site. Built around whole-life analytics and self-hosted projects, myMultivac\u2019s goals are to provide deeper insight and understanding into patterns that can be found within our digital footprints, in a secure, private way. Visit https://www.mymultivac.com for more details. Latest Projects # Todo Sync iOS Extension # A Pythonista 3 script that parses text files and creates ClickUp tasks and iOS reminders for any flagged text. Perfect for sifting through dozens of WIP projects! Visit the project page","title":"myMultivac"},{"location":"#what-is-mymultivac","text":"myMultivac is a personal project site. Built around whole-life analytics and self-hosted projects, myMultivac\u2019s goals are to provide deeper insight and understanding into patterns that can be found within our digital footprints, in a secure, private way. Visit https://www.mymultivac.com for more details.","title":"What is myMultivac?"},{"location":"#latest-projects","text":"","title":"Latest Projects"},{"location":"#todo-sync-ios-extension","text":"A Pythonista 3 script that parses text files and creates ClickUp tasks and iOS reminders for any flagged text. Perfect for sifting through dozens of WIP projects! Visit the project page","title":"Todo Sync iOS Extension"},{"location":"about/","text":"Some Backstory # myMultivac is a small personal project, designed to help me explore data in the world around us. It started as a self-hosted project, combining several open-sourced projects around home automation and private apps, such as Home Assistant, Plex and Firefly III. In the modern world, our digital footprint is vast, and it\u2019s difficult to control or contain. With the amount of data sent and received by nearly every app we use daily, huge organizations with deep pockets can leverage bits and pieces to build a frighteningly accurate picture of each user. Giving the user complete control of that information, and educating people about how it\u2019s collected, collated and wrangled, is one of the primary goals of the myMultivac project. Multivac\u2019s Name # Multivac is the name of a super-computer in several stories by Isaac Asimov. myMultivac was the name of my first home automation server, a raspberry pi running Home Assistant, inspired by these stories. I quickly learned that my little server could tell me so much more about my own habits and patterns: how often I was home, what time I woke up or went to bed, what I was listening to or watching\u2026 Smart devices can be used to track simple events that can unlock so much more about each of us.","title":"About"},{"location":"about/#some-backstory","text":"myMultivac is a small personal project, designed to help me explore data in the world around us. It started as a self-hosted project, combining several open-sourced projects around home automation and private apps, such as Home Assistant, Plex and Firefly III. In the modern world, our digital footprint is vast, and it\u2019s difficult to control or contain. With the amount of data sent and received by nearly every app we use daily, huge organizations with deep pockets can leverage bits and pieces to build a frighteningly accurate picture of each user. Giving the user complete control of that information, and educating people about how it\u2019s collected, collated and wrangled, is one of the primary goals of the myMultivac project.","title":"Some Backstory"},{"location":"about/#multivacs-name","text":"Multivac is the name of a super-computer in several stories by Isaac Asimov. myMultivac was the name of my first home automation server, a raspberry pi running Home Assistant, inspired by these stories. I quickly learned that my little server could tell me so much more about my own habits and patterns: how often I was home, what time I woke up or went to bed, what I was listening to or watching\u2026 Smart devices can be used to track simple events that can unlock so much more about each of us.","title":"Multivac's Name"},{"location":"articles/visualizing-salesforce-data/","text":"Visualizing Salesforce data can be tricky. Let\u2019s try building a gantt chart here graph TD A --> C(Power Sources / plants freezing) A --> D(Tree damage?) A --> E(Increased natural gas demand for heat) A --> F(Natural gas power plant outages) A --> G(Oil/gas production issues) A --> H((Water supply pump outages / treatment issues)) A --> I(Water freezing, pipes bursting) A((Cold temps and lack of weatherization)) --> B(Increased electrical demand for heat) B --> K((Electric outages / shortages)) B <--> J(Extreme electric rate spikes) C --> K D --> L(Transmission line damage?) E --> F F --> K G --> M((Oil/gas shortages)) H --> Q(Pipes failing, lack of pressure) I --> Q J --> K J --> P K --> N(Generator demand / use) K --> O(No electric stoves or heat) L --> K N --> M O --> I O --> N O --> P((Water outages, flooding)) Q --> P Q --> R(Contaminated water that needs boiling) R --> I R --> P","title":"Visualizing salesforce data"},{"location":"projects/foundation/","text":"Foundation # A simple simulation game, in which a galaxy-spanning empire evolves over thousands of years. There are several builds: Unity3D Web: a simple browser to explore the procedurally-generated galaxy, with limited functionality iOS (Python): the main focus for the simulation and AI testing","title":"Foundation"},{"location":"projects/foundation/#foundation","text":"A simple simulation game, in which a galaxy-spanning empire evolves over thousands of years. There are several builds: Unity3D Web: a simple browser to explore the procedurally-generated galaxy, with limited functionality iOS (Python): the main focus for the simulation and AI testing","title":"Foundation"},{"location":"projects/pythonista-todo/","text":"A Pythonista 3 script that parses text files and creates ClickUp tasks and iOS reminders for any flagged text. Perfect for sifting through dozens of WIP projects! View it on GitHub Project Overview # Todo list apps are a dime a dozen, and I often find myself hopping from one to another, depending on the project that I\u2019m working on. Lately, I\u2019ve been using Pythonista 3 on iOS a lot for prototyping small projects while I\u2019m away from my desk. It has several really useful iOS-specific libraries that have been simple to use, but it\u2019s challenging to swap back and forth between apps to update tasks or make notes. I also use several iPad apps to take notes that allow me to use Apple\u2019s Pencil to scrawl out handwritten text and diagrams, and I generally export those to iCloud folders. They usually contain a lot of items that I jot down to follow up with, but they can easily get lost in the shuffle. It can be painful. This script will use the Share sheet within iOS, and process a text file line by line, looking for todo list items and keywords. If it finds them, it will create a new ClickUp task and iOS reminder item for each one, so I can more easily keep track of where I left off. Built With # Pythonista3 Pythonista is an iOS-based Python IDE \u2013at the time of writing, it is a paid app. ClickUp ClickUp is a task / project / document manager that has a use-case for everyone. I prefer it over Notion. Getting Started # Prerequisites # While there is no code to install to use this script, you will require Pythonista 3 in order to use the iOS-specific libraries that come with that app. This script specifically creates tasks using ClickUp\u2019s API, and you will require a few IDs from that platform as well. Installation & Configuration # Import the todo-sync.py and config.json.example files into a folder within Pythonista. Add the todo-sync.py script to a Share sheet shortcut \u2013see Pythonista\u2019s documentation for this here: Utilities for Pythonista\u2019s App Extensions . See the Usage section below for more details about the required text structures. Rename the config.json.example file to config.json . Ensure that this file is stored in the same folder as the todo_sync.py script. This file should look similar to the following: { \"clickup_token\": \"pk_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\", \"clickup_list_id\": 87654321, \"set_ios_reminders\": true, \"set_ios_reminders_alarms\": true } You will need to provide a key for both, clickup_token and clickup_list_id in order for the script to function correctly. ClickUp Personal API Key # If you don\u2019t already have a ClickUp account, you will need to sign up for that first. Once you do have an account, please review ClickUp\u2019s article to find your Personal API Key Getting Started with the ClickUp API . Use this key for the clickup_token . ClickUp List ID # By default, this script will place all tasks into a single list. You will need to create this list within ClickUp first, and copy the list ID to include in the config.json file. Create a new list within ClickUp (you can name it whatever you like) Open the list In the address bar of your browser, copy the list ID portion of the URL: https://app.clickup.com/12345678/v/l/li/ 87654321 Any tasks created by the script will be added to this list. Set iOS Reminders # If you wish, you can enable or disable setting iOS reminders for any tasks created. When set_ios_reminders is set to true , the script will prompt you to authorize Pythonista to use your reminders. You must allow this, or something will probably explode into error messages. If it\u2019s set to false , no iOS reminders will be set. Set iOS Reminders Alarms # If you\u2019d like to have notifications before your reminder\u2019s due date, set the set_ios_reminders_alarms flag to true . If this is false , you can still add reminders for your tasks, but you won\u2019t get a pop-up notification before the due date. Usage # Before you\u2019ll be able to use this script for the first time, there are several configuration steps that are required. You will also need to review how this script parses keyword flags within your text files, to ensure your tasks are picked up. Structuring Your TODO Text # NOTE: This has really only been used for fairly small .txt and .py files, and may have untested limitations The script will read the contents of your file, and look for keyword flags. In order to be identified as a TODO item, the task must include one of the following flags: # TODO: [] \u25e6 <- this is the default character used when exporting iOS Notes as text files \u2610 Capitalization and spacing shouldn\u2019t matter, but these characters must appear at the beginning of the line (tabs and spaces are stripped). If a TODO item is found, the script will also parse any other supported keyword flags, to add context to the task to be created. Supported keyword flags are: Keyword Flag Expected Value Type Example Notes PRIORITY: integer: 1, 2, 3 or 4 PRIORITY: 3 1 - highest, 4 - lowest DUE: date: DD MMM YY DUE: 01 Jan 25 The month isn\u2019t case sensitive, but the day should be padded (%d %b %y format) NOTE: The keyword flags ARE case-sensitive, and include a space after the colon Any keyword flags, and their values, are stripped from the text before a task is created. The remaining text will be used as the task\u2019s title, and the description will include the name of the file as well. Within ClickUp, the task will also contain a tag for the file name, to allow for further sorting and filtering. For example, lines 2, 3 and 5 in the example below will be flagged and processed. How do I need to structure my text? [] Make sure it has one of the TODO keyword flags \u25e6 View the new tasks within ClickUp DUE: 01 Sep 21 This line won't get picked up, but the one below will. # TODO: Allow a user-defined calendar stored in config.json PRIORITY: 3 Processing Files # In order to pass your files to the script, navigate to the file within iOS. This should work from nearly anywhere there is a Share button \u2013with the exception of directly within the Notes app (see below for more info). You will need to add the script to the Share sheet, following Pythonista\u2019s instructions, linked above. The steps below assume your file is available within the Files app: Long-press on the file. Select Share Select Run Pythonista Script Select the Todo Sync script That\u2019s it! The file will be parsed, and you should see new ClickUp tasks and reminders set when reviewing those apps. Additional Notes # iOS Notes App # The Notes app doesn\u2019t provide a file name to the Share sheet, until the Note is exported. This means that any Notes that you\u2019d like to sync should be exported first, and saved somewhere on your local device. You can then process them through the Files app, for example. Pythonista App # My primary use of this has been to send my # TODO: comment lines in a script file as tasks. This can be done directly within Pythonista, by opening the left-hand panel, and choosing Edit > Share to open the Share sheet. It won\u2019t update TODO items that you remove, though, but that may be a future addition. Roadmap # See the # TODO entries within the script itself for more detail. Primarily this is functional \u2018as-is\u2019, but further work can be done to improve certain areas. Updating the TODOs within the source file to include a Task ID, to track that they have been sent previously Config options for default reminder alarms Adding keyword flags for STATUS, ASSIGNEE and START DATE Support for project-based lists, based on the file path Generalizing the tasks to allow for further task-manager support within: JIRA GitHub Google Task Allowing a folder to be passed, to read each file within Repository # Project Link: https://github.com/ian-multivac/pythonista-todo-sync","title":"Todo Sync iOS Extension"},{"location":"projects/pythonista-todo/#project-overview","text":"Todo list apps are a dime a dozen, and I often find myself hopping from one to another, depending on the project that I\u2019m working on. Lately, I\u2019ve been using Pythonista 3 on iOS a lot for prototyping small projects while I\u2019m away from my desk. It has several really useful iOS-specific libraries that have been simple to use, but it\u2019s challenging to swap back and forth between apps to update tasks or make notes. I also use several iPad apps to take notes that allow me to use Apple\u2019s Pencil to scrawl out handwritten text and diagrams, and I generally export those to iCloud folders. They usually contain a lot of items that I jot down to follow up with, but they can easily get lost in the shuffle. It can be painful. This script will use the Share sheet within iOS, and process a text file line by line, looking for todo list items and keywords. If it finds them, it will create a new ClickUp task and iOS reminder item for each one, so I can more easily keep track of where I left off.","title":"Project Overview"},{"location":"projects/pythonista-todo/#built-with","text":"Pythonista3 Pythonista is an iOS-based Python IDE \u2013at the time of writing, it is a paid app. ClickUp ClickUp is a task / project / document manager that has a use-case for everyone. I prefer it over Notion.","title":"Built With"},{"location":"projects/pythonista-todo/#getting-started","text":"","title":"Getting Started"},{"location":"projects/pythonista-todo/#prerequisites","text":"While there is no code to install to use this script, you will require Pythonista 3 in order to use the iOS-specific libraries that come with that app. This script specifically creates tasks using ClickUp\u2019s API, and you will require a few IDs from that platform as well.","title":"Prerequisites"},{"location":"projects/pythonista-todo/#installation-configuration","text":"Import the todo-sync.py and config.json.example files into a folder within Pythonista. Add the todo-sync.py script to a Share sheet shortcut \u2013see Pythonista\u2019s documentation for this here: Utilities for Pythonista\u2019s App Extensions . See the Usage section below for more details about the required text structures. Rename the config.json.example file to config.json . Ensure that this file is stored in the same folder as the todo_sync.py script. This file should look similar to the following: { \"clickup_token\": \"pk_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\", \"clickup_list_id\": 87654321, \"set_ios_reminders\": true, \"set_ios_reminders_alarms\": true } You will need to provide a key for both, clickup_token and clickup_list_id in order for the script to function correctly.","title":"Installation &amp; Configuration"},{"location":"projects/pythonista-todo/#clickup-personal-api-key","text":"If you don\u2019t already have a ClickUp account, you will need to sign up for that first. Once you do have an account, please review ClickUp\u2019s article to find your Personal API Key Getting Started with the ClickUp API . Use this key for the clickup_token .","title":"ClickUp Personal API Key"},{"location":"projects/pythonista-todo/#clickup-list-id","text":"By default, this script will place all tasks into a single list. You will need to create this list within ClickUp first, and copy the list ID to include in the config.json file. Create a new list within ClickUp (you can name it whatever you like) Open the list In the address bar of your browser, copy the list ID portion of the URL: https://app.clickup.com/12345678/v/l/li/ 87654321 Any tasks created by the script will be added to this list.","title":"ClickUp List ID"},{"location":"projects/pythonista-todo/#set-ios-reminders","text":"If you wish, you can enable or disable setting iOS reminders for any tasks created. When set_ios_reminders is set to true , the script will prompt you to authorize Pythonista to use your reminders. You must allow this, or something will probably explode into error messages. If it\u2019s set to false , no iOS reminders will be set.","title":"Set iOS Reminders"},{"location":"projects/pythonista-todo/#set-ios-reminders-alarms","text":"If you\u2019d like to have notifications before your reminder\u2019s due date, set the set_ios_reminders_alarms flag to true . If this is false , you can still add reminders for your tasks, but you won\u2019t get a pop-up notification before the due date.","title":"Set iOS Reminders Alarms"},{"location":"projects/pythonista-todo/#usage","text":"Before you\u2019ll be able to use this script for the first time, there are several configuration steps that are required. You will also need to review how this script parses keyword flags within your text files, to ensure your tasks are picked up.","title":"Usage"},{"location":"projects/pythonista-todo/#structuring-your-todo-text","text":"NOTE: This has really only been used for fairly small .txt and .py files, and may have untested limitations The script will read the contents of your file, and look for keyword flags. In order to be identified as a TODO item, the task must include one of the following flags: # TODO: [] \u25e6 <- this is the default character used when exporting iOS Notes as text files \u2610 Capitalization and spacing shouldn\u2019t matter, but these characters must appear at the beginning of the line (tabs and spaces are stripped). If a TODO item is found, the script will also parse any other supported keyword flags, to add context to the task to be created. Supported keyword flags are: Keyword Flag Expected Value Type Example Notes PRIORITY: integer: 1, 2, 3 or 4 PRIORITY: 3 1 - highest, 4 - lowest DUE: date: DD MMM YY DUE: 01 Jan 25 The month isn\u2019t case sensitive, but the day should be padded (%d %b %y format) NOTE: The keyword flags ARE case-sensitive, and include a space after the colon Any keyword flags, and their values, are stripped from the text before a task is created. The remaining text will be used as the task\u2019s title, and the description will include the name of the file as well. Within ClickUp, the task will also contain a tag for the file name, to allow for further sorting and filtering. For example, lines 2, 3 and 5 in the example below will be flagged and processed. How do I need to structure my text? [] Make sure it has one of the TODO keyword flags \u25e6 View the new tasks within ClickUp DUE: 01 Sep 21 This line won't get picked up, but the one below will. # TODO: Allow a user-defined calendar stored in config.json PRIORITY: 3","title":"Structuring Your TODO Text"},{"location":"projects/pythonista-todo/#processing-files","text":"In order to pass your files to the script, navigate to the file within iOS. This should work from nearly anywhere there is a Share button \u2013with the exception of directly within the Notes app (see below for more info). You will need to add the script to the Share sheet, following Pythonista\u2019s instructions, linked above. The steps below assume your file is available within the Files app: Long-press on the file. Select Share Select Run Pythonista Script Select the Todo Sync script That\u2019s it! The file will be parsed, and you should see new ClickUp tasks and reminders set when reviewing those apps.","title":"Processing Files"},{"location":"projects/pythonista-todo/#additional-notes","text":"","title":"Additional Notes"},{"location":"projects/pythonista-todo/#ios-notes-app","text":"The Notes app doesn\u2019t provide a file name to the Share sheet, until the Note is exported. This means that any Notes that you\u2019d like to sync should be exported first, and saved somewhere on your local device. You can then process them through the Files app, for example.","title":"iOS Notes App"},{"location":"projects/pythonista-todo/#pythonista-app","text":"My primary use of this has been to send my # TODO: comment lines in a script file as tasks. This can be done directly within Pythonista, by opening the left-hand panel, and choosing Edit > Share to open the Share sheet. It won\u2019t update TODO items that you remove, though, but that may be a future addition.","title":"Pythonista App"},{"location":"projects/pythonista-todo/#roadmap","text":"See the # TODO entries within the script itself for more detail. Primarily this is functional \u2018as-is\u2019, but further work can be done to improve certain areas. Updating the TODOs within the source file to include a Task ID, to track that they have been sent previously Config options for default reminder alarms Adding keyword flags for STATUS, ASSIGNEE and START DATE Support for project-based lists, based on the file path Generalizing the tasks to allow for further task-manager support within: JIRA GitHub Google Task Allowing a folder to be passed, to read each file within","title":"Roadmap"},{"location":"projects/pythonista-todo/#repository","text":"Project Link: https://github.com/ian-multivac/pythonista-todo-sync","title":"Repository"},{"location":"projects/reflections/","text":"Reflections # A journaling and self-reflection app, simply designed for quick and easy posts. This project was built using Django Rest Framework, and demonstrates authentication flows.","title":"Reflections"},{"location":"projects/reflections/#reflections","text":"A journaling and self-reflection app, simply designed for quick and easy posts. This project was built using Django Rest Framework, and demonstrates authentication flows.","title":"Reflections"},{"location":"projects/smartish-dots/","text":"Smartish Dots # A common coding exercise around genetic learning algorithms, Smartish Dots trains generations of dots to reach a goal. This project is built using the Scene framework of Pythonista 3 on iOS.","title":"Smartish Dots"},{"location":"projects/smartish-dots/#smartish-dots","text":"A common coding exercise around genetic learning algorithms, Smartish Dots trains generations of dots to reach a goal. This project is built using the Scene framework of Pythonista 3 on iOS.","title":"Smartish Dots"}]}