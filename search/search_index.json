{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is myMultivac? # myMultivac is a personal project site. Built around whole-life analytics and self-hosted projects, myMultivac\u2019s goals are to provide deeper insight and understanding into patterns that can be found within our digital footprints, in a secure, private way. Latest Projects # Displaying Local Airport Departures # A colleague described an interesting project, and I set out to see how N8N could potentially provide a way to maintain a display of local airport departures. Walk through the solution on the project page . Generative AI-based Personal Assistant # A gift to a colleague; a project tutorial is coming soon. Todo Sync iOS Extension # A Pythonista 3 script that parses text files and creates ClickUp tasks and iOS reminders for any flagged text. Perfect for sifting through dozens of WIP projects! Visit the project page here.","title":"myMultivac"},{"location":"#what-is-mymultivac","text":"myMultivac is a personal project site. Built around whole-life analytics and self-hosted projects, myMultivac\u2019s goals are to provide deeper insight and understanding into patterns that can be found within our digital footprints, in a secure, private way.","title":"What is myMultivac?"},{"location":"#latest-projects","text":"","title":"Latest Projects"},{"location":"#displaying-local-airport-departures","text":"A colleague described an interesting project, and I set out to see how N8N could potentially provide a way to maintain a display of local airport departures. Walk through the solution on the project page .","title":"Displaying Local Airport Departures"},{"location":"#generative-ai-based-personal-assistant","text":"A gift to a colleague; a project tutorial is coming soon.","title":"Generative AI-based Personal Assistant"},{"location":"#todo-sync-ios-extension","text":"A Pythonista 3 script that parses text files and creates ClickUp tasks and iOS reminders for any flagged text. Perfect for sifting through dozens of WIP projects! Visit the project page here.","title":"Todo Sync iOS Extension"},{"location":"about/","text":"Some Backstory # myMultivac is a small personal project, designed to help me explore data in the world around us. It started as a self-hosted project, combining several open-sourced projects around home automation and private apps, such as Home Assistant, Plex and Firefly III. In the modern world, our digital footprint is vast, and it\u2019s difficult to control or contain. With the amount of data sent and received by nearly every app we use daily, huge organizations with deep pockets can leverage bits and pieces to build a frighteningly accurate picture of each user. Giving the user complete control of that information, and educating people about how it\u2019s collected, collated and wrangled, is one of the primary goals of the myMultivac project. Multivac\u2019s Name # Multivac is the name of a super-computer in several stories by Isaac Asimov. myMultivac was the name of my first home automation server, a raspberry pi running Home Assistant, inspired by these stories. I quickly learned that my little server could tell me so much more about my own habits and patterns: how often I was home, what time I woke up or went to bed, what I was listening to or watching\u2026 Smart devices can be used to track simple events that can unlock so much more about each of us.","title":"About"},{"location":"about/#some-backstory","text":"myMultivac is a small personal project, designed to help me explore data in the world around us. It started as a self-hosted project, combining several open-sourced projects around home automation and private apps, such as Home Assistant, Plex and Firefly III. In the modern world, our digital footprint is vast, and it\u2019s difficult to control or contain. With the amount of data sent and received by nearly every app we use daily, huge organizations with deep pockets can leverage bits and pieces to build a frighteningly accurate picture of each user. Giving the user complete control of that information, and educating people about how it\u2019s collected, collated and wrangled, is one of the primary goals of the myMultivac project.","title":"Some Backstory"},{"location":"about/#multivacs-name","text":"Multivac is the name of a super-computer in several stories by Isaac Asimov. myMultivac was the name of my first home automation server, a raspberry pi running Home Assistant, inspired by these stories. I quickly learned that my little server could tell me so much more about my own habits and patterns: how often I was home, what time I woke up or went to bed, what I was listening to or watching\u2026 Smart devices can be used to track simple events that can unlock so much more about each of us.","title":"Multivac's Name"},{"location":"articles/visualizing-salesforce-data/","text":"Visualizing Salesforce data can be tricky. Let\u2019s try building a gantt chart here graph TD A --> C(Power Sources / plants freezing) A --> D(Tree damage?) A --> E(Increased natural gas demand for heat) A --> F(Natural gas power plant outages) A --> G(Oil/gas production issues) A --> H((Water supply pump outages / treatment issues)) A --> I(Water freezing, pipes bursting) A((Cold temps and lack of weatherization)) --> B(Increased electrical demand for heat) B --> K((Electric outages / shortages)) B <--> J(Extreme electric rate spikes) C --> K D --> L(Transmission line damage?) E --> F F --> K G --> M((Oil/gas shortages)) H --> Q(Pipes failing, lack of pressure) I --> Q J --> K J --> P K --> N(Generator demand / use) K --> O(No electric stoves or heat) L --> K N --> M O --> I O --> N O --> P((Water outages, flooding)) Q --> P Q --> R(Contaminated water that needs boiling) R --> I R --> P","title":"Visualizing salesforce data"},{"location":"projects/automations/","text":"A colleague was working on a project to present a local airport\u2019s departures on a display monitor. There are many APIs out there that can provide flight data, but most of them are overkill for a single airport, with few flights in and out each day. Even with expensive (but comprehensive) API data, there\u2019s still a need to make the display at least a little bit presentable, for the end users who are checking their flights\u2019 status. We\u2019ll serve a simple webpage that displays this info, without all the extra clutter that comes with the airport\u2019s main site. This project uses a self-hosted N8N environment to serve the latest departure information from the airport\u2019s website. N8N provides an easy interface to build a wide range of automations, and has proven to be very powerful as I\u2019ve explored it over the last few months. I\u2019m not here to shill for their company, but I highly recommend it, from what I\u2019ve been able to do with it so far. And yes, there are puns. 10,000\u2019 View # The general logic we\u2019ll use for this project can be applied to any given set of tools, but this automation only has a few steps. The flow: listens for an incoming request using a webhook, then makes a request to the airport\u2019s site, and extracts the relevant table for flight departures, before dumping the table into a new HTML template, and responding to the webhook with the new webpage template. Within N8N, it looks like this: Each of the nodes in that screenshot acts as a function. It has some sort of input and some sort of output. Nodes can be stitched together to make some very complex flows, the same as any \u201chand-written\u201d program made of code functions. Let\u2019s take a closer look into each of the nodes in that screenshot, and walk through what each step is actually doing. Taking Off # Any automation flow requires a defined trigger. We\u2019re going to use a Webhook node. The webhook used in this flow can be replaced by a script scheduled via cron job, if we chose not to use N8N, but the subsequent steps would be essentially the same. Ultimately, we need to serve a page at the end of this flow, and webhooks are the way to do that within N8N. See Publishing and refining our flow below for some other benefits of changing the trigger. Why all the talk about N8N? I initially built this project as a python script, and it took hardly any time at all. But, that was hard to share without ensuring the person I\u2019m sharing with has easy access to a dev environment etc etc. One of the biggest ways N8N has helped me build automations and quickly iterate on random projects is the incredibly easy-to-use pre-built nodes. There are only a couple types shown in the screenshot above, but there are hundreds built-in, and more that are provided by their community. Its drag-and-drop builder makes it very simple to handle transforming data as it works through a series of nodes, but possibly my favourite part is that it provides a basic webserver framework, so I don\u2019t have to constantly keep working on a backend in a local environment for a quick dumbass idea, and I can easily share the results with less technical people. Step 1: Webhook node # This node basically just waits until someone makes a request to a specific URL. Once it receives that request, the rest of the flow is initiated. The important part of this node is the Respond setting at the bottom of the image, which is set to respond \u201cUsing \u2018Respond Using Webhook\u2019 Node\u201d. I accidentally forgot that setting\u2026 I was fiddling with my final template for way too long, wondering why my formatting didn\u2019t get applied, I won\u2019t lie. N8N has a lot of different nodes and settings, and sometimes it\u2019s easy to forget to tick a box! Step 2: GET Airport Site node # Once the flow is triggered by the webhook, this node makes a GET request to the airport\u2019s website. The specific site targeted by this flow uses straight HTML on its pages, and the response to the GET request is a messy pile of HTML, but a straightforward one. Dynamic sites Our source site is updated frequently, but it doesn\u2019t load data using JavaScript, and there are no extra navigation steps or input forms to worry about. Other sites might require additional steps to load the appropriate elements into the page, which could be harder to do directly in N8N. The response to the GET request gets assigned to the data property of the node\u2019s output, and shown on the right side of the screenshot above. In other tools or raw scripts, this could be the raw response data, without getting assigned to its own property. Either way, our next step is to extract a specific section of that HTML response. Step 3: Extract Table Element node # Wading through raw HTML is no one\u2019s idea of a good time, and the Extract HTML node within N8N needs us to target a specific CSS selector. Thanfully, visiting the airport\u2019s website and right-clicking on the departing flights table lets us Inspect Element , which can usually make quick work of that. This will pop open the browser console and show us the site\u2019s code. It took a little bit of spot-checking through the element tree to find the best one to use, but in this case, the target element ID was #nav-departures . Browsers vary My screenshot above is from Safari, but Chrome, Firefox and Edge will each have options to find a CSS selector, usually by right-clicking on the element\u2019s code in the console, and hitting \u201cCopy\u201d. In the screenshot above, there are a few areas highlighted with blue squares. In step 2, N8N stored our response data in a property called data . This step reads the data property, and targets any of the extraction values we set in the section below. This extracted data is then passed as JSON in the output of this node. In our case, we want to target the #nav-departures selector that we found above, by entering it into the CSS Selector field. Just above that, note that we\u2019ve assigned the key nav-departures to this extracted data, so we can use it in the next step. Step 4: Generate HTML Template node # We now have our table data, stored with the key nav-departures as the output of step 3. Since our end goal is to have a simple webpage to display the data, we need to create a basic HTML template that will properly block the section that we just in-elegantly carved from its original home. Again, N8N has a node for this. The HTML node can be used to generate a template, which will allow us to drop our key into some boilerplate website code. The default code that\u2019s already loaded in the node also gives us a way to apply some basic styling, which is a good thing because that\u2019s my least favourite part of any of these projects. The quick and dirty HTML template used is here: <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\" /> <title>Airport Departures</title> </head> <body> <div class=\"container\"> <h1>Airport Departures</h1> <div> <div style=\"margin-left:auto;margin-right:auto;\"> {{ $json['nav-departures'][0] }} </div> </div> </div> </body> </html> <style> .container { background-color: #ffffff; text-align: center; padding: 16px; border-radius: 8px; font-family: Arial, Helvetica, sans-serif; } table { margin-left: auto; margin-right: auto; } h1 { color: #658a4a; font-size: 24px; font-weight: bold; padding: 8px; text-align: center; } h2 { color: #909399; font-size: 18px; font-weight: bold; padding: 8px; } td, th { text-align: center; height: 24px; vertical-align: middle; padding: 16px; } th { background-color: #658a4a; color: white; } tr { border: 1px solid #fff; border-collapse: collapse; } arrdeptables.departing { text-align: center; } tr.arrivals:nth-child(even){background-color: #f2f2f2;} </style> I really don\u2019t love dealing with CSS So there\u2019re likely errors, unused code, and feel free to make yours better :) The most important part of this HTML template is here: ... <div style=\"margin-left:auto;margin-right:auto;\"> {{ $json['nav-departures'][0] }} </div> ... The handlebars notation in the format, {{ something }} , describes a variable in N8N. The specific instruction it describes is to look up the node\u2019s input (shown by $json ), in the nav-departures key, and retrieve the first element in the array (described by [0] ). In this case, it\u2019s the data we just stored in that key, in the last step. Within the Generate HTML Template node, our JSON input gets added directly into the base webpage template, to properly block the existing HTML that we pulled out of the airport\u2019s main site. The <style> block in the HTML template sets up some simple formatting instructions to the table, and we can see a much prettier (if a little bit squashed) result in the output preview pane on the right side of that screenshot. Did I tell you already that I don\u2019t love CSS? It can be annoying, but a couple small changes can make a huge difference in formatting. Getting the formatting rules in place to took longer than writing the code, or connecting the nodes, but I\u2019ll begrudgingly admit that it was a good refresher. Step 5: Respond to Webhook # The output of our last node was a lot more appealling than the raw JSON information that we\u2019ve been dealing with up until now. The only thing left to do is to pass this new template back to the original webhook URL, so our display screen can present it. We can drag the input\u2019s html property directly into the \u201cResponse Body\u201d field inside the node, and we see that it automagically gets turned into the handlebars variable required by N8N. We also need to set an appropriate header within our response, to tell the web client to display this as an HTML page, rather than raw JSON. To do that, we have to add Content-Type as a header name, and text/html as the corresponding value. N8N will serve up the webpage to our end users, without any further hassle. Final Approach # Publishing and refining our flow # After (saving and) publishing our flow within N8N, we can hit our new webhook with our browser, and we should see our new flight data table. N8N allows you to keep production and test data mostly separate, and you can safely iterate without interrupting your \u201clive\u201d version without much trouble. There are several ways that this simple flow can be extended or enhanced. Error handling # The most obvious and likely most important for an end user, is error handling! What happens if we can\u2019t connect to the airport\u2019s site? What happens if they change the CSS selector on their end? Our flow doesn\u2019t have any way to surface errors currently, but that\u2019s absolutely something you\u2019ll want to consider as you build your own projects. Asynchronous updates # This flow waits until the webhook trigger is called, before doing any requests to the main site. An ideal flow would gather that information periodically, and storing it, without waiting for something to trigger a request to the external site. It would improve response time, and make it easier to handle errors before they\u2019re made visible to an end user. Pretty it up # This particular table relies on the airport doing nearly all of the data transformation; we just slap a bit of styling over top. Now that the basics are done, though, we could do some more substantial reformatting, like colour-coding delayed flights or changing the header information. Combined with a few of the other refinements above, we could even enrich the page with information from other sources, like the current weather at a flight\u2019s destination.","title":"Displaying Local Airport Departures"},{"location":"projects/automations/#10000-view","text":"The general logic we\u2019ll use for this project can be applied to any given set of tools, but this automation only has a few steps. The flow: listens for an incoming request using a webhook, then makes a request to the airport\u2019s site, and extracts the relevant table for flight departures, before dumping the table into a new HTML template, and responding to the webhook with the new webpage template. Within N8N, it looks like this: Each of the nodes in that screenshot acts as a function. It has some sort of input and some sort of output. Nodes can be stitched together to make some very complex flows, the same as any \u201chand-written\u201d program made of code functions. Let\u2019s take a closer look into each of the nodes in that screenshot, and walk through what each step is actually doing.","title":"10,000' View"},{"location":"projects/automations/#taking-off","text":"Any automation flow requires a defined trigger. We\u2019re going to use a Webhook node. The webhook used in this flow can be replaced by a script scheduled via cron job, if we chose not to use N8N, but the subsequent steps would be essentially the same. Ultimately, we need to serve a page at the end of this flow, and webhooks are the way to do that within N8N. See Publishing and refining our flow below for some other benefits of changing the trigger. Why all the talk about N8N? I initially built this project as a python script, and it took hardly any time at all. But, that was hard to share without ensuring the person I\u2019m sharing with has easy access to a dev environment etc etc. One of the biggest ways N8N has helped me build automations and quickly iterate on random projects is the incredibly easy-to-use pre-built nodes. There are only a couple types shown in the screenshot above, but there are hundreds built-in, and more that are provided by their community. Its drag-and-drop builder makes it very simple to handle transforming data as it works through a series of nodes, but possibly my favourite part is that it provides a basic webserver framework, so I don\u2019t have to constantly keep working on a backend in a local environment for a quick dumbass idea, and I can easily share the results with less technical people.","title":"Taking Off"},{"location":"projects/automations/#step-1-webhook-node","text":"This node basically just waits until someone makes a request to a specific URL. Once it receives that request, the rest of the flow is initiated. The important part of this node is the Respond setting at the bottom of the image, which is set to respond \u201cUsing \u2018Respond Using Webhook\u2019 Node\u201d. I accidentally forgot that setting\u2026 I was fiddling with my final template for way too long, wondering why my formatting didn\u2019t get applied, I won\u2019t lie. N8N has a lot of different nodes and settings, and sometimes it\u2019s easy to forget to tick a box!","title":"Step 1: Webhook node"},{"location":"projects/automations/#step-2-get-airport-site-node","text":"Once the flow is triggered by the webhook, this node makes a GET request to the airport\u2019s website. The specific site targeted by this flow uses straight HTML on its pages, and the response to the GET request is a messy pile of HTML, but a straightforward one. Dynamic sites Our source site is updated frequently, but it doesn\u2019t load data using JavaScript, and there are no extra navigation steps or input forms to worry about. Other sites might require additional steps to load the appropriate elements into the page, which could be harder to do directly in N8N. The response to the GET request gets assigned to the data property of the node\u2019s output, and shown on the right side of the screenshot above. In other tools or raw scripts, this could be the raw response data, without getting assigned to its own property. Either way, our next step is to extract a specific section of that HTML response.","title":"Step 2: GET Airport Site node"},{"location":"projects/automations/#step-3-extract-table-element-node","text":"Wading through raw HTML is no one\u2019s idea of a good time, and the Extract HTML node within N8N needs us to target a specific CSS selector. Thanfully, visiting the airport\u2019s website and right-clicking on the departing flights table lets us Inspect Element , which can usually make quick work of that. This will pop open the browser console and show us the site\u2019s code. It took a little bit of spot-checking through the element tree to find the best one to use, but in this case, the target element ID was #nav-departures . Browsers vary My screenshot above is from Safari, but Chrome, Firefox and Edge will each have options to find a CSS selector, usually by right-clicking on the element\u2019s code in the console, and hitting \u201cCopy\u201d. In the screenshot above, there are a few areas highlighted with blue squares. In step 2, N8N stored our response data in a property called data . This step reads the data property, and targets any of the extraction values we set in the section below. This extracted data is then passed as JSON in the output of this node. In our case, we want to target the #nav-departures selector that we found above, by entering it into the CSS Selector field. Just above that, note that we\u2019ve assigned the key nav-departures to this extracted data, so we can use it in the next step.","title":"Step 3: Extract Table Element node"},{"location":"projects/automations/#step-4-generate-html-template-node","text":"We now have our table data, stored with the key nav-departures as the output of step 3. Since our end goal is to have a simple webpage to display the data, we need to create a basic HTML template that will properly block the section that we just in-elegantly carved from its original home. Again, N8N has a node for this. The HTML node can be used to generate a template, which will allow us to drop our key into some boilerplate website code. The default code that\u2019s already loaded in the node also gives us a way to apply some basic styling, which is a good thing because that\u2019s my least favourite part of any of these projects. The quick and dirty HTML template used is here: <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\" /> <title>Airport Departures</title> </head> <body> <div class=\"container\"> <h1>Airport Departures</h1> <div> <div style=\"margin-left:auto;margin-right:auto;\"> {{ $json['nav-departures'][0] }} </div> </div> </div> </body> </html> <style> .container { background-color: #ffffff; text-align: center; padding: 16px; border-radius: 8px; font-family: Arial, Helvetica, sans-serif; } table { margin-left: auto; margin-right: auto; } h1 { color: #658a4a; font-size: 24px; font-weight: bold; padding: 8px; text-align: center; } h2 { color: #909399; font-size: 18px; font-weight: bold; padding: 8px; } td, th { text-align: center; height: 24px; vertical-align: middle; padding: 16px; } th { background-color: #658a4a; color: white; } tr { border: 1px solid #fff; border-collapse: collapse; } arrdeptables.departing { text-align: center; } tr.arrivals:nth-child(even){background-color: #f2f2f2;} </style> I really don\u2019t love dealing with CSS So there\u2019re likely errors, unused code, and feel free to make yours better :) The most important part of this HTML template is here: ... <div style=\"margin-left:auto;margin-right:auto;\"> {{ $json['nav-departures'][0] }} </div> ... The handlebars notation in the format, {{ something }} , describes a variable in N8N. The specific instruction it describes is to look up the node\u2019s input (shown by $json ), in the nav-departures key, and retrieve the first element in the array (described by [0] ). In this case, it\u2019s the data we just stored in that key, in the last step. Within the Generate HTML Template node, our JSON input gets added directly into the base webpage template, to properly block the existing HTML that we pulled out of the airport\u2019s main site. The <style> block in the HTML template sets up some simple formatting instructions to the table, and we can see a much prettier (if a little bit squashed) result in the output preview pane on the right side of that screenshot. Did I tell you already that I don\u2019t love CSS? It can be annoying, but a couple small changes can make a huge difference in formatting. Getting the formatting rules in place to took longer than writing the code, or connecting the nodes, but I\u2019ll begrudgingly admit that it was a good refresher.","title":"Step 4: Generate HTML Template node"},{"location":"projects/automations/#step-5-respond-to-webhook","text":"The output of our last node was a lot more appealling than the raw JSON information that we\u2019ve been dealing with up until now. The only thing left to do is to pass this new template back to the original webhook URL, so our display screen can present it. We can drag the input\u2019s html property directly into the \u201cResponse Body\u201d field inside the node, and we see that it automagically gets turned into the handlebars variable required by N8N. We also need to set an appropriate header within our response, to tell the web client to display this as an HTML page, rather than raw JSON. To do that, we have to add Content-Type as a header name, and text/html as the corresponding value. N8N will serve up the webpage to our end users, without any further hassle.","title":"Step 5: Respond to Webhook"},{"location":"projects/automations/#final-approach","text":"","title":"Final Approach"},{"location":"projects/automations/#publishing-and-refining-our-flow","text":"After (saving and) publishing our flow within N8N, we can hit our new webhook with our browser, and we should see our new flight data table. N8N allows you to keep production and test data mostly separate, and you can safely iterate without interrupting your \u201clive\u201d version without much trouble. There are several ways that this simple flow can be extended or enhanced.","title":"Publishing and refining our flow"},{"location":"projects/automations/#error-handling","text":"The most obvious and likely most important for an end user, is error handling! What happens if we can\u2019t connect to the airport\u2019s site? What happens if they change the CSS selector on their end? Our flow doesn\u2019t have any way to surface errors currently, but that\u2019s absolutely something you\u2019ll want to consider as you build your own projects.","title":"Error handling"},{"location":"projects/automations/#asynchronous-updates","text":"This flow waits until the webhook trigger is called, before doing any requests to the main site. An ideal flow would gather that information periodically, and storing it, without waiting for something to trigger a request to the external site. It would improve response time, and make it easier to handle errors before they\u2019re made visible to an end user.","title":"Asynchronous updates"},{"location":"projects/automations/#pretty-it-up","text":"This particular table relies on the airport doing nearly all of the data transformation; we just slap a bit of styling over top. Now that the basics are done, though, we could do some more substantial reformatting, like colour-coding delayed flights or changing the header information. Combined with a few of the other refinements above, we could even enrich the page with information from other sources, like the current weather at a flight\u2019s destination.","title":"Pretty it up"},{"location":"projects/foundation/","text":"Foundation # A simple simulation game, in which a galaxy-spanning empire evolves over thousands of years. There are several builds: Unity3D Web: a simple browser to explore the procedurally-generated galaxy, with limited functionality iOS (Python): the main focus for the simulation and AI testing","title":"Foundation"},{"location":"projects/foundation/#foundation","text":"A simple simulation game, in which a galaxy-spanning empire evolves over thousands of years. There are several builds: Unity3D Web: a simple browser to explore the procedurally-generated galaxy, with limited functionality iOS (Python): the main focus for the simulation and AI testing","title":"Foundation"},{"location":"projects/pythonista-todo/","text":"A Pythonista 3 script that parses text files and creates ClickUp tasks and iOS reminders for any flagged text. Perfect for sifting through dozens of WIP projects! View it on GitHub Project Overview # Todo list apps are a dime a dozen, and I often find myself hopping from one to another, depending on the project that I\u2019m working on. Lately, I\u2019ve been using Pythonista 3 on iOS a lot for prototyping small projects while I\u2019m away from my desk. It has several really useful iOS-specific libraries that have been simple to use, but it\u2019s challenging to swap back and forth between apps to update tasks or make notes. I also use several iPad apps to take notes that allow me to use Apple\u2019s Pencil to scrawl out handwritten text and diagrams, and I generally export those to iCloud folders. They usually contain a lot of items that I jot down to follow up with, but they can easily get lost in the shuffle. It can be painful. This script will use the Share sheet within iOS, and process a text file line by line, looking for todo list items and keywords. If it finds them, it will create a new ClickUp task and iOS reminder item for each one, so I can more easily keep track of where I left off. Built With # Pythonista3 Pythonista is an iOS-based Python IDE \u2013at the time of writing, it is a paid app. ClickUp ClickUp is a task / project / document manager that has a use-case for everyone. I prefer it over Notion. Getting Started # Prerequisites # While there is no code to install to use this script, you will require Pythonista 3 in order to use the iOS-specific libraries that come with that app. This script specifically creates tasks using ClickUp\u2019s API, and you will require a few IDs from that platform as well. Installation & Configuration # Import the todo-sync.py and config.json.example files into a folder within Pythonista. Add the todo-sync.py script to a Share sheet shortcut \u2013see Pythonista\u2019s documentation for this here: Utilities for Pythonista\u2019s App Extensions . See the Usage section below for more details about the required text structures. Rename the config.json.example file to config.json . Ensure that this file is stored in the same folder as the todo_sync.py script. This file should look similar to the following: { \"clickup_token\": \"pk_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\", \"clickup_list_id\": 87654321, \"set_ios_reminders\": true, \"set_ios_reminders_alarms\": true } You will need to provide a key for both, clickup_token and clickup_list_id in order for the script to function correctly. ClickUp Personal API Key # If you don\u2019t already have a ClickUp account, you will need to sign up for that first. Once you do have an account, please review ClickUp\u2019s article to find your Personal API Key Getting Started with the ClickUp API . Use this key for the clickup_token . ClickUp List ID # By default, this script will place all tasks into a single list. You will need to create this list within ClickUp first, and copy the list ID to include in the config.json file. Create a new list within ClickUp (you can name it whatever you like) Open the list In the address bar of your browser, copy the list ID portion of the URL: https://app.clickup.com/12345678/v/l/li/ 87654321 Any tasks created by the script will be added to this list. Set iOS Reminders # If you wish, you can enable or disable setting iOS reminders for any tasks created. When set_ios_reminders is set to true , the script will prompt you to authorize Pythonista to use your reminders. You must allow this, or something will probably explode into error messages. If it\u2019s set to false , no iOS reminders will be set. Set iOS Reminders Alarms # If you\u2019d like to have notifications before your reminder\u2019s due date, set the set_ios_reminders_alarms flag to true . If this is false , you can still add reminders for your tasks, but you won\u2019t get a pop-up notification before the due date. Usage # Before you\u2019ll be able to use this script for the first time, there are several configuration steps that are required. You will also need to review how this script parses keyword flags within your text files, to ensure your tasks are picked up. Structuring Your TODO Text # NOTE: This has really only been used for fairly small .txt and .py files, and may have untested limitations The script will read the contents of your file, and look for keyword flags. In order to be identified as a TODO item, the task must include one of the following flags: # TODO: [] \u25e6 <- this is the default character used when exporting iOS Notes as text files \u2610 Capitalization and spacing shouldn\u2019t matter, but these characters must appear at the beginning of the line (tabs and spaces are stripped). If a TODO item is found, the script will also parse any other supported keyword flags, to add context to the task to be created. Supported keyword flags are: Keyword Flag Expected Value Type Example Notes PRIORITY: integer: 1, 2, 3 or 4 PRIORITY: 3 1 - highest, 4 - lowest DUE: date: DD MMM YY DUE: 01 Jan 25 The month isn\u2019t case sensitive, but the day should be padded (%d %b %y format) NOTE: The keyword flags ARE case-sensitive, and include a space after the colon Any keyword flags, and their values, are stripped from the text before a task is created. The remaining text will be used as the task\u2019s title, and the description will include the name of the file as well. Within ClickUp, the task will also contain a tag for the file name, to allow for further sorting and filtering. For example, lines 2, 3 and 5 in the example below will be flagged and processed. How do I need to structure my text? [] Make sure it has one of the TODO keyword flags \u25e6 View the new tasks within ClickUp DUE: 01 Sep 21 This line won't get picked up, but the one below will. # TODO: Allow a user-defined calendar stored in config.json PRIORITY: 3 Processing Files # In order to pass your files to the script, navigate to the file within iOS. This should work from nearly anywhere there is a Share button \u2013with the exception of directly within the Notes app (see below for more info). You will need to add the script to the Share sheet, following Pythonista\u2019s instructions, linked above. The steps below assume your file is available within the Files app: Long-press on the file. Select Share Select Run Pythonista Script Select the Todo Sync script That\u2019s it! The file will be parsed, and you should see new ClickUp tasks and reminders set when reviewing those apps. Additional Notes # iOS Notes App # The Notes app doesn\u2019t provide a file name to the Share sheet, until the Note is exported. This means that any Notes that you\u2019d like to sync should be exported first, and saved somewhere on your local device. You can then process them through the Files app, for example. Pythonista App # My primary use of this has been to send my # TODO: comment lines in a script file as tasks. This can be done directly within Pythonista, by opening the left-hand panel, and choosing Edit > Share to open the Share sheet. It won\u2019t update TODO items that you remove, though, but that may be a future addition. Roadmap # See the # TODO entries within the script itself for more detail. Primarily this is functional \u2018as-is\u2019, but further work can be done to improve certain areas. Updating the TODOs within the source file to include a Task ID, to track that they have been sent previously Config options for default reminder alarms Adding keyword flags for STATUS, ASSIGNEE and START DATE Support for project-based lists, based on the file path Generalizing the tasks to allow for further task-manager support within: JIRA GitHub Google Task Allowing a folder to be passed, to read each file within Repository # Project Link: https://github.com/ian-multivac/pythonista-todo-sync","title":"Todo Sync iOS Extension"},{"location":"projects/pythonista-todo/#project-overview","text":"Todo list apps are a dime a dozen, and I often find myself hopping from one to another, depending on the project that I\u2019m working on. Lately, I\u2019ve been using Pythonista 3 on iOS a lot for prototyping small projects while I\u2019m away from my desk. It has several really useful iOS-specific libraries that have been simple to use, but it\u2019s challenging to swap back and forth between apps to update tasks or make notes. I also use several iPad apps to take notes that allow me to use Apple\u2019s Pencil to scrawl out handwritten text and diagrams, and I generally export those to iCloud folders. They usually contain a lot of items that I jot down to follow up with, but they can easily get lost in the shuffle. It can be painful. This script will use the Share sheet within iOS, and process a text file line by line, looking for todo list items and keywords. If it finds them, it will create a new ClickUp task and iOS reminder item for each one, so I can more easily keep track of where I left off.","title":"Project Overview"},{"location":"projects/pythonista-todo/#built-with","text":"Pythonista3 Pythonista is an iOS-based Python IDE \u2013at the time of writing, it is a paid app. ClickUp ClickUp is a task / project / document manager that has a use-case for everyone. I prefer it over Notion.","title":"Built With"},{"location":"projects/pythonista-todo/#getting-started","text":"","title":"Getting Started"},{"location":"projects/pythonista-todo/#prerequisites","text":"While there is no code to install to use this script, you will require Pythonista 3 in order to use the iOS-specific libraries that come with that app. This script specifically creates tasks using ClickUp\u2019s API, and you will require a few IDs from that platform as well.","title":"Prerequisites"},{"location":"projects/pythonista-todo/#installation-configuration","text":"Import the todo-sync.py and config.json.example files into a folder within Pythonista. Add the todo-sync.py script to a Share sheet shortcut \u2013see Pythonista\u2019s documentation for this here: Utilities for Pythonista\u2019s App Extensions . See the Usage section below for more details about the required text structures. Rename the config.json.example file to config.json . Ensure that this file is stored in the same folder as the todo_sync.py script. This file should look similar to the following: { \"clickup_token\": \"pk_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\", \"clickup_list_id\": 87654321, \"set_ios_reminders\": true, \"set_ios_reminders_alarms\": true } You will need to provide a key for both, clickup_token and clickup_list_id in order for the script to function correctly.","title":"Installation &amp; Configuration"},{"location":"projects/pythonista-todo/#clickup-personal-api-key","text":"If you don\u2019t already have a ClickUp account, you will need to sign up for that first. Once you do have an account, please review ClickUp\u2019s article to find your Personal API Key Getting Started with the ClickUp API . Use this key for the clickup_token .","title":"ClickUp Personal API Key"},{"location":"projects/pythonista-todo/#clickup-list-id","text":"By default, this script will place all tasks into a single list. You will need to create this list within ClickUp first, and copy the list ID to include in the config.json file. Create a new list within ClickUp (you can name it whatever you like) Open the list In the address bar of your browser, copy the list ID portion of the URL: https://app.clickup.com/12345678/v/l/li/ 87654321 Any tasks created by the script will be added to this list.","title":"ClickUp List ID"},{"location":"projects/pythonista-todo/#set-ios-reminders","text":"If you wish, you can enable or disable setting iOS reminders for any tasks created. When set_ios_reminders is set to true , the script will prompt you to authorize Pythonista to use your reminders. You must allow this, or something will probably explode into error messages. If it\u2019s set to false , no iOS reminders will be set.","title":"Set iOS Reminders"},{"location":"projects/pythonista-todo/#set-ios-reminders-alarms","text":"If you\u2019d like to have notifications before your reminder\u2019s due date, set the set_ios_reminders_alarms flag to true . If this is false , you can still add reminders for your tasks, but you won\u2019t get a pop-up notification before the due date.","title":"Set iOS Reminders Alarms"},{"location":"projects/pythonista-todo/#usage","text":"Before you\u2019ll be able to use this script for the first time, there are several configuration steps that are required. You will also need to review how this script parses keyword flags within your text files, to ensure your tasks are picked up.","title":"Usage"},{"location":"projects/pythonista-todo/#structuring-your-todo-text","text":"NOTE: This has really only been used for fairly small .txt and .py files, and may have untested limitations The script will read the contents of your file, and look for keyword flags. In order to be identified as a TODO item, the task must include one of the following flags: # TODO: [] \u25e6 <- this is the default character used when exporting iOS Notes as text files \u2610 Capitalization and spacing shouldn\u2019t matter, but these characters must appear at the beginning of the line (tabs and spaces are stripped). If a TODO item is found, the script will also parse any other supported keyword flags, to add context to the task to be created. Supported keyword flags are: Keyword Flag Expected Value Type Example Notes PRIORITY: integer: 1, 2, 3 or 4 PRIORITY: 3 1 - highest, 4 - lowest DUE: date: DD MMM YY DUE: 01 Jan 25 The month isn\u2019t case sensitive, but the day should be padded (%d %b %y format) NOTE: The keyword flags ARE case-sensitive, and include a space after the colon Any keyword flags, and their values, are stripped from the text before a task is created. The remaining text will be used as the task\u2019s title, and the description will include the name of the file as well. Within ClickUp, the task will also contain a tag for the file name, to allow for further sorting and filtering. For example, lines 2, 3 and 5 in the example below will be flagged and processed. How do I need to structure my text? [] Make sure it has one of the TODO keyword flags \u25e6 View the new tasks within ClickUp DUE: 01 Sep 21 This line won't get picked up, but the one below will. # TODO: Allow a user-defined calendar stored in config.json PRIORITY: 3","title":"Structuring Your TODO Text"},{"location":"projects/pythonista-todo/#processing-files","text":"In order to pass your files to the script, navigate to the file within iOS. This should work from nearly anywhere there is a Share button \u2013with the exception of directly within the Notes app (see below for more info). You will need to add the script to the Share sheet, following Pythonista\u2019s instructions, linked above. The steps below assume your file is available within the Files app: Long-press on the file. Select Share Select Run Pythonista Script Select the Todo Sync script That\u2019s it! The file will be parsed, and you should see new ClickUp tasks and reminders set when reviewing those apps.","title":"Processing Files"},{"location":"projects/pythonista-todo/#additional-notes","text":"","title":"Additional Notes"},{"location":"projects/pythonista-todo/#ios-notes-app","text":"The Notes app doesn\u2019t provide a file name to the Share sheet, until the Note is exported. This means that any Notes that you\u2019d like to sync should be exported first, and saved somewhere on your local device. You can then process them through the Files app, for example.","title":"iOS Notes App"},{"location":"projects/pythonista-todo/#pythonista-app","text":"My primary use of this has been to send my # TODO: comment lines in a script file as tasks. This can be done directly within Pythonista, by opening the left-hand panel, and choosing Edit > Share to open the Share sheet. It won\u2019t update TODO items that you remove, though, but that may be a future addition.","title":"Pythonista App"},{"location":"projects/pythonista-todo/#roadmap","text":"See the # TODO entries within the script itself for more detail. Primarily this is functional \u2018as-is\u2019, but further work can be done to improve certain areas. Updating the TODOs within the source file to include a Task ID, to track that they have been sent previously Config options for default reminder alarms Adding keyword flags for STATUS, ASSIGNEE and START DATE Support for project-based lists, based on the file path Generalizing the tasks to allow for further task-manager support within: JIRA GitHub Google Task Allowing a folder to be passed, to read each file within","title":"Roadmap"},{"location":"projects/pythonista-todo/#repository","text":"Project Link: https://github.com/ian-multivac/pythonista-todo-sync","title":"Repository"},{"location":"projects/reflections/","text":"Reflections # A journaling and self-reflection app, simply designed for quick and easy posts. This project was built using Django Rest Framework, and demonstrates authentication flows.","title":"Reflections"},{"location":"projects/reflections/#reflections","text":"A journaling and self-reflection app, simply designed for quick and easy posts. This project was built using Django Rest Framework, and demonstrates authentication flows.","title":"Reflections"},{"location":"projects/smartish-dots/","text":"Smartish Dots # A common coding exercise around genetic learning algorithms, Smartish Dots trains generations of dots to reach a goal. This project is built using the Scene framework of Pythonista 3 on iOS.","title":"Smartish Dots"},{"location":"projects/smartish-dots/#smartish-dots","text":"A common coding exercise around genetic learning algorithms, Smartish Dots trains generations of dots to reach a goal. This project is built using the Scene framework of Pythonista 3 on iOS.","title":"Smartish Dots"},{"location":"projects/websites/","text":"Other Websites # Over the last while, several other domains have been included in the myMultivac portfolio. In order to explore some unfamiliar tools and processes, myMultivac expanded to allow a quick and dirty way to spin up a basic static site using Firebase hosting. Each site is tied with Google Analytics, and also relates to other explorations. You Got Jammed # I use this .gif way too often, and decided it needed a dedicated domain for it. Visit yougotjammed.com if you really feel like it. Coffee Trouble # Inspired by a Startup Name Generator tool that I stumbled across when looking for something completely different, coffeetrouble.com was an expensive one-off HTML joke. Scungle # Because the horngus of a dongfish is attached by a scungle to a kind of dillsack, scungle.com is a placeholder for the time being. It will be used to manage custom connectors between sites, including external and social authorization. Drytindr # An AI-generated site template created using a prompt \u201ca dating site that the Golden Girls would use\u201d, drytindr.com is a parody dating site. It will be a complete mock of a dating site, including self-contained bot users with some demo visibility. Jeann.ai # An generative AI chatbot that helps answer questions from a public knowledge base. This started as a joke, but quickly turned into an incredibly useful bot, and was surprisingly easy to build. Jeann.ai uses N8N to manage two versions of the bot: one that can be accessed through an embedded widget on the site above, and another that can be integrated easily into Slack to help answer questions in a private environment.","title":"Dumb Websites"},{"location":"projects/websites/#other-websites","text":"Over the last while, several other domains have been included in the myMultivac portfolio. In order to explore some unfamiliar tools and processes, myMultivac expanded to allow a quick and dirty way to spin up a basic static site using Firebase hosting. Each site is tied with Google Analytics, and also relates to other explorations.","title":"Other Websites"},{"location":"projects/websites/#you-got-jammed","text":"I use this .gif way too often, and decided it needed a dedicated domain for it. Visit yougotjammed.com if you really feel like it.","title":"You Got Jammed"},{"location":"projects/websites/#coffee-trouble","text":"Inspired by a Startup Name Generator tool that I stumbled across when looking for something completely different, coffeetrouble.com was an expensive one-off HTML joke.","title":"Coffee Trouble"},{"location":"projects/websites/#scungle","text":"Because the horngus of a dongfish is attached by a scungle to a kind of dillsack, scungle.com is a placeholder for the time being. It will be used to manage custom connectors between sites, including external and social authorization.","title":"Scungle"},{"location":"projects/websites/#drytindr","text":"An AI-generated site template created using a prompt \u201ca dating site that the Golden Girls would use\u201d, drytindr.com is a parody dating site. It will be a complete mock of a dating site, including self-contained bot users with some demo visibility.","title":"Drytindr"},{"location":"projects/websites/#jeannai","text":"An generative AI chatbot that helps answer questions from a public knowledge base. This started as a joke, but quickly turned into an incredibly useful bot, and was surprisingly easy to build. Jeann.ai uses N8N to manage two versions of the bot: one that can be accessed through an embedded widget on the site above, and another that can be integrated easily into Slack to help answer questions in a private environment.","title":"Jeann.ai"}]}